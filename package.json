{
  "name": "bookmanagement",
  "version": "1.0.0",
  "description": "Project - Books Management\r Key points\r Create a group database groupXDatabase. You can clean the db you previously used and resue that.\r This time each group should have a single git branch. Coordinate amongst yourselves by ensuring every next person pulls the code last pushed by a team mate. You branch will be checked as part of the demo. Branch name should follow the naming convention project/booksManagementGroupX\r Follow the naming conventions exactly as instructed.\r ##Models\r User Model\r { \r   title: {string, mandatory, enum[Mr, Mrs, Miss]},\r   name: {string, mandatory},\r   phone: {string, mandatory, unique},\r   email: {string, mandatory, valid email, unique}, \r   password: {string, mandatory, minLen 8, maxLen 15},\r   address: {\r     street: {string},\r     city: {string},\r     pincode: {string}\r   },\r   createdAt: {timestamp},\r   updatedAt: {timestamp}\r }\r Books Model\r { \r   title: {string, mandatory, unique},\r   excerpt: {string, mandatory}, \r   userId: {ObjectId, mandatory, refs to user model},\r   ISBN: {string, mandatory, unique},\r   category: {string, mandatory},\r   subcategory: {string, mandatory},\r   reviews: {number, default: 0, comment: Holds number of reviews of this book},\r   deletedAt: {Date, when the document is deleted}, \r   isDeleted: {boolean, default: false},\r   releasedAt: {Date, mandatory, format(\"YYYY-MM-DD\")},\r   createdAt: {timestamp},\r   updatedAt: {timestamp},\r }\r Review Model (Books review)\r {\r   bookId: {ObjectId, mandatory, refs to book model},\r   reviewedBy: {string, mandatory, default 'Guest', value: reviewer's name},\r   reviewedAt: {Date, mandatory},\r   rating: {number, min 1, max 5, mandatory},\r   review: {string, optional}\r   isDeleted: {boolean, default: false},\r }\r User APIs\r ##POST /register\r Create a user - atleast 5 users\r Create a user document from request body.\r Return HTTP status 201 on a succesful user creation. Also return the user document. The response should be a JSON object like this\r Return HTTP status 400 if no params or invalid params received in request body. The response should be a JSON object like this\r POST /login\r Allow an user to login with their email and password.\r On a successful login attempt return a JWT token contatining the userId, exp, iat. The response should be a JSON object like this\r If the credentials are incorrect return a suitable error message with a valid HTTP status code. The response should be a JSON object like this\r Books API\r ##POST /books\r Create a book document from request body. Get userId in request body only.\r Make sure the userId is a valid userId by checking the user exist in the users collection.\r Return HTTP status 201 on a succesful book creation. Also return the book document. The response should be a JSON object like this\r Create atleast 10 books for each user\r Return HTTP status 400 for an invalid request with a response body like this\r ##GET /books\r Returns all books in the collection that aren't deleted. Return only book _id, title, excerpt, userId, category, releasedAt, reviews field. Response example here\r Return the HTTP status 200 if any documents are found. The response structure should be like this\r If no documents are found then return an HTTP status 404 with a response like this\r Filter books list by applying filters. Query param can have any combination of below filters.\r By userId\r By category\r By subcategory example of a query url: books?filtername=filtervalue&f2=fv2\r Return all books sorted by book name in Alphabatical order\r ##DELETE /books/:bookId",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jagriti89/Bookmanagement.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/jagriti89/Bookmanagement/issues"
  },
  "homepage": "https://github.com/jagriti89/Bookmanagement#readme",
  "dependencies": {
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.0"
  }
}
